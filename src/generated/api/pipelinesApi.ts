/**
 * Sajari API
 * Sajari is a smart, highly-configurable, real-time search service that enables thousands of businesses worldwide to provide amazing search experiences on their websites, stores, and applications.
 *
 * The version of the OpenAPI document: v4alpha1
 * Contact: support@sajari.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest from "request";
import http from "http";

/* tslint:disable:no-unused-locals */
import { GatewayruntimeError1 } from "../model/gatewayruntimeError1";
import { GatewayruntimeError2 } from "../model/gatewayruntimeError2";
import { Sajariv4alpha1Pipeline1 } from "../model/sajariv4alpha1Pipeline1";
import { V4alpha1GeneratePipelinesRequest } from "../model/v4alpha1GeneratePipelinesRequest";
import { V4alpha1GeneratePipelinesResponse } from "../model/v4alpha1GeneratePipelinesResponse";
import { V4alpha1ListPipelinesResponse } from "../model/v4alpha1ListPipelinesResponse";
import { V4alpha1SetDefaultPipelineRequest } from "../model/v4alpha1SetDefaultPipelineRequest";
import { V4alpha1SetDefaultVersionRequest } from "../model/v4alpha1SetDefaultVersionRequest";

import {
  ObjectSerializer,
  Authentication,
  VoidAuth,
  Interceptor,
} from "../model/models";
import {
  HttpBasicAuth,
  HttpBearerAuth,
  ApiKeyAuth,
  OAuth,
} from "../model/models";

import { HttpError, RequestFile } from "./apis";

let defaultBasePath = "https://api-gateway.sajari.com";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum PipelinesApiApiKeys {}

export class PipelinesApi {
  protected _basePath = defaultBasePath;
  protected _defaultHeaders: any = {};
  protected _useQuerystring: boolean = false;

  protected authentications = {
    default: <Authentication>new VoidAuth(),
    BasicAuth: new HttpBasicAuth(),
  };

  protected interceptors: Interceptor[] = [];

  constructor(basePath?: string);
  constructor(username: string, password: string, basePath?: string);
  constructor(
    basePathOrUsername: string,
    password?: string,
    basePath?: string
  ) {
    if (password) {
      this.username = basePathOrUsername;
      this.password = password;
      if (basePath) {
        this.basePath = basePath;
      }
    } else {
      if (basePathOrUsername) {
        this.basePath = basePathOrUsername;
      }
    }
  }

  set useQuerystring(value: boolean) {
    this._useQuerystring = value;
  }

  set basePath(basePath: string) {
    this._basePath = basePath;
  }

  set defaultHeaders(defaultHeaders: any) {
    this._defaultHeaders = defaultHeaders;
  }

  get defaultHeaders() {
    return this._defaultHeaders;
  }

  get basePath() {
    return this._basePath;
  }

  public setDefaultAuthentication(auth: Authentication) {
    this.authentications.default = auth;
  }

  public setApiKey(key: PipelinesApiApiKeys, value: string) {
    (this.authentications as any)[PipelinesApiApiKeys[key]].apiKey = value;
  }

  set username(username: string) {
    this.authentications.BasicAuth.username = username;
  }

  set password(password: string) {
    this.authentications.BasicAuth.password = password;
  }

  public addInterceptor(interceptor: Interceptor) {
    this.interceptors.push(interceptor);
  }

  /**
   * Create a new pipeline.  Pipelines are immutable once created. If you want to change a pipeline e.g. to add or change some steps, you need to create a new version of that pipeline.  To start using a new pipeline you need to update your record ingestion calls and/or your query calls to specify the new pipeline.  To create the pipeline from YAML, set the request\'s `Content-Type` header to `application/vnd.json` and submit the pipeline\'s YAML in the request body.
   * @summary Create pipeline
   * @param accountId The account that owns the collection, e.g. &#x60;1257894000000000000&#x60;.
   * @param collectionId The collection to create the pipeline in, e.g. &#x60;my-collection&#x60;.
   * @param sajariv4alpha1Pipeline1 The pipeline to create.
   */
  public async createPipeline(
    accountId: string,
    collectionId: string,
    sajariv4alpha1Pipeline1: Sajariv4alpha1Pipeline1,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: Sajariv4alpha1Pipeline1;
  }> {
    const localVarPath =
      this.basePath +
      "/v4alpha1/accounts/{account_id}/collections/{collection_id}/pipelines"
        .replace(/{\w+}/, String(accountId))
        .replace(/{\w+}/, String(collectionId));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json", "application/vnd.yaml"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'accountId' is not null or undefined
    if (accountId === null || accountId === undefined) {
      throw new Error(
        "Required parameter accountId was null or undefined when calling createPipeline."
      );
    }

    // verify required parameter 'collectionId' is not null or undefined
    if (collectionId === null || collectionId === undefined) {
      throw new Error(
        "Required parameter collectionId was null or undefined when calling createPipeline."
      );
    }

    // verify required parameter 'sajariv4alpha1Pipeline1' is not null or undefined
    if (
      sajariv4alpha1Pipeline1 === null ||
      sajariv4alpha1Pipeline1 === undefined
    ) {
      throw new Error(
        "Required parameter sajariv4alpha1Pipeline1 was null or undefined when calling createPipeline."
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "POST",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(
        sajariv4alpha1Pipeline1,
        "Sajariv4alpha1Pipeline1"
      ),
    };

    let authenticationPromise = Promise.resolve();
    if (
      this.authentications.BasicAuth.username &&
      this.authentications.BasicAuth.password
    ) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: Sajariv4alpha1Pipeline1;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            body = ObjectSerializer.deserialize(
              body,
              "Sajariv4alpha1Pipeline1"
            );
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   * Generate basic record and query pipeline templates. Use these templates as a starting point for your collection\'s pipelines.  This call returns a set of pipelines that you can pass directly to the create pipeline call.  The generated templates can be returned in JSON, the default, or YAML. To return the generated pipelines in YAML, set the request\'s `Accept` header to `application/vnd.yaml`. The two pipelines in the YAML response are separated by three dashes (`---`).
   * @summary Generate pipelines
   * @param accountId The account that owns the collection, e.g. &#x60;1257894000000000000&#x60;.
   * @param collectionId The collection, e.g. &#x60;my-collection&#x60;.
   * @param v4alpha1GeneratePipelinesRequest
   */
  public async generatePipelines(
    accountId: string,
    collectionId: string,
    v4alpha1GeneratePipelinesRequest: V4alpha1GeneratePipelinesRequest,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: V4alpha1GeneratePipelinesResponse;
  }> {
    const localVarPath =
      this.basePath +
      "/v4alpha1/accounts/{account_id}/collections/{collection_id}:generatePipelines"
        .replace(/{\w+}/, String(accountId))
        .replace(/{\w+}/, String(collectionId));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json", "application/vnd.yaml"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'accountId' is not null or undefined
    if (accountId === null || accountId === undefined) {
      throw new Error(
        "Required parameter accountId was null or undefined when calling generatePipelines."
      );
    }

    // verify required parameter 'collectionId' is not null or undefined
    if (collectionId === null || collectionId === undefined) {
      throw new Error(
        "Required parameter collectionId was null or undefined when calling generatePipelines."
      );
    }

    // verify required parameter 'v4alpha1GeneratePipelinesRequest' is not null or undefined
    if (
      v4alpha1GeneratePipelinesRequest === null ||
      v4alpha1GeneratePipelinesRequest === undefined
    ) {
      throw new Error(
        "Required parameter v4alpha1GeneratePipelinesRequest was null or undefined when calling generatePipelines."
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "POST",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(
        v4alpha1GeneratePipelinesRequest,
        "V4alpha1GeneratePipelinesRequest"
      ),
    };

    let authenticationPromise = Promise.resolve();
    if (
      this.authentications.BasicAuth.username &&
      this.authentications.BasicAuth.password
    ) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: V4alpha1GeneratePipelinesResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            body = ObjectSerializer.deserialize(
              body,
              "V4alpha1GeneratePipelinesResponse"
            );
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   * Retrieve the details of a pipeline. Supply the type, name and version.  To retrieve the pipeline in YAML, set the request\'s `Accept` header to `application/vnd.yaml`.
   * @summary Get pipeline
   * @param accountId The account that owns the collection, e.g. &#x60;1257894000000000000&#x60;.
   * @param collectionId The collection that owns the pipeline, e.g. &#x60;my-collection&#x60;.
   * @param type The type of the pipeline to retrieve, either &#x60;record&#x60; or &#x60;query&#x60;.
   * @param name The name of the pipeline to retrieve, e.g. &#x60;my-pipeline&#x60;.
   * @param version The version of the pipeline to retrieve, e.g. &#x60;42&#x60;.
   * @param view The amount of information to include in the retrieved pipeline.   - PIPELINE_VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;PIPELINE_VIEW_BASIC&#x60; view.  - PIPELINE_VIEW_BASIC: Include basic information including ID and description but not the full detailed configuration. This is the default value (for both [ListPipelines](/#operation/ListPipelines) and [GetPipeline](/#operation/GetPipeline)).  - PIPELINE_VIEW_FULL: Include the information from &#x60;PIPELINE_VIEW_BASIC&#x60;, plus full step configuration.
   */
  public async getPipeline(
    accountId: string,
    collectionId: string,
    type: string,
    name: string,
    version: string,
    view?:
      | "PIPELINE_VIEW_UNSPECIFIED"
      | "PIPELINE_VIEW_BASIC"
      | "PIPELINE_VIEW_FULL",
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: Sajariv4alpha1Pipeline1;
  }> {
    const localVarPath =
      this.basePath +
      "/v4alpha1/accounts/{account_id}/collections/{collection_id}/pipelines/{type}/{name}/{version}"
        .replace(/{\w+}/, String(accountId))
        .replace(/{\w+}/, String(collectionId))
        .replace(/{\w+}/, String(type))
        .replace(/{\w+}/, String(name))
        .replace(/{\w+}/, String(version));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json", "application/vnd.yaml"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'accountId' is not null or undefined
    if (accountId === null || accountId === undefined) {
      throw new Error(
        "Required parameter accountId was null or undefined when calling getPipeline."
      );
    }

    // verify required parameter 'collectionId' is not null or undefined
    if (collectionId === null || collectionId === undefined) {
      throw new Error(
        "Required parameter collectionId was null or undefined when calling getPipeline."
      );
    }

    // verify required parameter 'type' is not null or undefined
    if (type === null || type === undefined) {
      throw new Error(
        "Required parameter type was null or undefined when calling getPipeline."
      );
    }

    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling getPipeline."
      );
    }

    // verify required parameter 'version' is not null or undefined
    if (version === null || version === undefined) {
      throw new Error(
        "Required parameter version was null or undefined when calling getPipeline."
      );
    }

    if (view !== undefined) {
      localVarQueryParameters["view"] = ObjectSerializer.serialize(
        view,
        "'PIPELINE_VIEW_UNSPECIFIED' | 'PIPELINE_VIEW_BASIC' | 'PIPELINE_VIEW_FULL'"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (
      this.authentications.BasicAuth.username &&
      this.authentications.BasicAuth.password
    ) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: Sajariv4alpha1Pipeline1;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            body = ObjectSerializer.deserialize(
              body,
              "Sajariv4alpha1Pipeline1"
            );
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   * Retrieve a list of pipelines.
   * @summary List pipelines
   * @param accountId The account that owns the collection, e.g. &#x60;1257894000000000000&#x60;.
   * @param collectionId The collection that owns this set of pipelines, e.g. &#x60;my-collection&#x60;.
   * @param pageSize The maximum number of pipelines to return. The service may return fewer than this value.  If unspecified, at most 50 pipelines are returned.  The maximum value is 1000; values above 1000 are coerced to 1000.
   * @param pageToken A page token, received from a previous [ListPipelines](/#operation/ListPipelines) call.  Provide this to retrieve the subsequent page.  When paginating, all other parameters provided to [ListPipelines](/#operation/ListPipelines) must match the call that provided the page token.
   * @param view The amount of information to include in each retrieved pipeline.   - PIPELINE_VIEW_UNSPECIFIED: The default / unset value. The API defaults to the &#x60;PIPELINE_VIEW_BASIC&#x60; view.  - PIPELINE_VIEW_BASIC: Include basic information including ID and description but not the full detailed configuration. This is the default value (for both [ListPipelines](/#operation/ListPipelines) and [GetPipeline](/#operation/GetPipeline)).  - PIPELINE_VIEW_FULL: Include the information from &#x60;PIPELINE_VIEW_BASIC&#x60;, plus full step configuration.
   */
  public async listPipelines(
    accountId: string,
    collectionId: string,
    pageSize?: number,
    pageToken?: string,
    view?:
      | "PIPELINE_VIEW_UNSPECIFIED"
      | "PIPELINE_VIEW_BASIC"
      | "PIPELINE_VIEW_FULL",
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: V4alpha1ListPipelinesResponse;
  }> {
    const localVarPath =
      this.basePath +
      "/v4alpha1/accounts/{account_id}/collections/{collection_id}/pipelines"
        .replace(/{\w+}/, String(accountId))
        .replace(/{\w+}/, String(collectionId));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'accountId' is not null or undefined
    if (accountId === null || accountId === undefined) {
      throw new Error(
        "Required parameter accountId was null or undefined when calling listPipelines."
      );
    }

    // verify required parameter 'collectionId' is not null or undefined
    if (collectionId === null || collectionId === undefined) {
      throw new Error(
        "Required parameter collectionId was null or undefined when calling listPipelines."
      );
    }

    if (pageSize !== undefined) {
      localVarQueryParameters["page_size"] = ObjectSerializer.serialize(
        pageSize,
        "number"
      );
    }

    if (pageToken !== undefined) {
      localVarQueryParameters["page_token"] = ObjectSerializer.serialize(
        pageToken,
        "string"
      );
    }

    if (view !== undefined) {
      localVarQueryParameters["view"] = ObjectSerializer.serialize(
        view,
        "'PIPELINE_VIEW_UNSPECIFIED' | 'PIPELINE_VIEW_BASIC' | 'PIPELINE_VIEW_FULL'"
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "GET",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (
      this.authentications.BasicAuth.username &&
      this.authentications.BasicAuth.password
    ) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: V4alpha1ListPipelinesResponse;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            body = ObjectSerializer.deserialize(
              body,
              "V4alpha1ListPipelinesResponse"
            );
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   * Set the default pipeline for a collection.  Every collection has a default `record` pipeline and a default `query` pipeline.  When a pipeline is required to complete an operation, it can be omitted from the request if a default pipeline has been set. When adding a record to a collection, the default `record` pipeline is used if none is provided. When querying a collection, the default `query` pipeline is used if none is provided.  Once a default pipeline has been set it cannot be cleared, only set to another pipeline.
   * @summary Set default pipeline
   * @param accountId The account that owns the collection, e.g. &#x60;1257894000000000000&#x60;.
   * @param collectionId The collection to set the default query pipeline of, e.g. &#x60;my-collection&#x60;.
   * @param v4alpha1SetDefaultPipelineRequest
   */
  public async setDefaultPipeline(
    accountId: string,
    collectionId: string,
    v4alpha1SetDefaultPipelineRequest: V4alpha1SetDefaultPipelineRequest,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: object }> {
    const localVarPath =
      this.basePath +
      "/v4alpha1/accounts/{account_id}/collections/{collection_id}:setDefaultPipeline"
        .replace(/{\w+}/, String(accountId))
        .replace(/{\w+}/, String(collectionId));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'accountId' is not null or undefined
    if (accountId === null || accountId === undefined) {
      throw new Error(
        "Required parameter accountId was null or undefined when calling setDefaultPipeline."
      );
    }

    // verify required parameter 'collectionId' is not null or undefined
    if (collectionId === null || collectionId === undefined) {
      throw new Error(
        "Required parameter collectionId was null or undefined when calling setDefaultPipeline."
      );
    }

    // verify required parameter 'v4alpha1SetDefaultPipelineRequest' is not null or undefined
    if (
      v4alpha1SetDefaultPipelineRequest === null ||
      v4alpha1SetDefaultPipelineRequest === undefined
    ) {
      throw new Error(
        "Required parameter v4alpha1SetDefaultPipelineRequest was null or undefined when calling setDefaultPipeline."
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "POST",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(
        v4alpha1SetDefaultPipelineRequest,
        "V4alpha1SetDefaultPipelineRequest"
      ),
    };

    let authenticationPromise = Promise.resolve();
    if (
      this.authentications.BasicAuth.username &&
      this.authentications.BasicAuth.password
    ) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: object }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              body = ObjectSerializer.deserialize(body, "object");
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   * Set the default version for a given pipeline.  The default version of a pipeline allows you to refer to a pipeline without having to specify a version. This means you can change the pipeline version used for requests without having to change your code.
   * @summary Set default pipeline version
   * @param accountId The account that owns the collection, e.g. &#x60;1257894000000000000&#x60;.
   * @param collectionId The collection that owns the pipeline to set the default version of, e.g. &#x60;my-collection&#x60;.
   * @param type The type of the pipeline to set the default version of, either &#x60;record&#x60; or &#x60;query&#x60;.
   * @param name The name of the pipeline to set the default version of, e.g. &#x60;my-pipeline&#x60;.
   * @param v4alpha1SetDefaultVersionRequest
   */
  public async setDefaultVersion(
    accountId: string,
    collectionId: string,
    type: string,
    name: string,
    v4alpha1SetDefaultVersionRequest: V4alpha1SetDefaultVersionRequest,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: object }> {
    const localVarPath =
      this.basePath +
      "/v4alpha1/accounts/{account_id}/collections/{collection_id}/pipelines/{type}/{name}:setDefaultVersion"
        .replace(/{\w+}/, String(accountId))
        .replace(/{\w+}/, String(collectionId))
        .replace(/{\w+}/, String(type))
        .replace(/{\w+}/, String(name));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ["application/json"];
    // give precedence to 'application/json'
    if (produces.indexOf("application/json") >= 0) {
      localVarHeaderParams.Accept = "application/json";
    } else {
      localVarHeaderParams.Accept = produces.join(",");
    }
    let localVarFormParams: any = {};

    // verify required parameter 'accountId' is not null or undefined
    if (accountId === null || accountId === undefined) {
      throw new Error(
        "Required parameter accountId was null or undefined when calling setDefaultVersion."
      );
    }

    // verify required parameter 'collectionId' is not null or undefined
    if (collectionId === null || collectionId === undefined) {
      throw new Error(
        "Required parameter collectionId was null or undefined when calling setDefaultVersion."
      );
    }

    // verify required parameter 'type' is not null or undefined
    if (type === null || type === undefined) {
      throw new Error(
        "Required parameter type was null or undefined when calling setDefaultVersion."
      );
    }

    // verify required parameter 'name' is not null or undefined
    if (name === null || name === undefined) {
      throw new Error(
        "Required parameter name was null or undefined when calling setDefaultVersion."
      );
    }

    // verify required parameter 'v4alpha1SetDefaultVersionRequest' is not null or undefined
    if (
      v4alpha1SetDefaultVersionRequest === null ||
      v4alpha1SetDefaultVersionRequest === undefined
    ) {
      throw new Error(
        "Required parameter v4alpha1SetDefaultVersionRequest was null or undefined when calling setDefaultVersion."
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: "POST",
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(
        v4alpha1SetDefaultVersionRequest,
        "V4alpha1SetDefaultVersionRequest"
      ),
    };

    let authenticationPromise = Promise.resolve();
    if (
      this.authentications.BasicAuth.username &&
      this.authentications.BasicAuth.password
    ) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.BasicAuth.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: object }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              body = ObjectSerializer.deserialize(body, "object");
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
}
