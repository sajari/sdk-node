/**
 * Search.io API
 * Search.io offers a search and discovery service with Neuralsearch®, the world\'s first instant AI search technology. Businesses of all sizes use Search.io to build site search and discovery solutions that maximize e-commerce revenue, optimize on-site customer experience, and scale their online presence.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@search.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from "./models";
import { Banner } from "./banner";
import { QueryResultToken } from "./queryResultToken";

export class QueryResult {
  "banner"?: Banner;
  /**
   * The feature score of the result.  This is a value between 0 and 1 representing the business-specific ranking of the result as determined by the ranking adjustments. See [Ranking adjustments](https://docs.search.io/documentation/fundamentals/search-settings/ranking-adjustments) for more information.
   */
  "featureScore"?: number;
  /**
   * The index score of the result.  This is a value between 0 and 1 representing the relevance of the result using traditional keyword search. The higher the score the more relevant the result is.
   */
  "indexScore"?: number;
  /**
   * The neural score of the result.  This is a value between 0 and 1 representing the relevance of the result using Neuralsearch®, using AI-based search.
   */
  "neuralScore"?: number;
  /**
   * An object made up of field-value pairs that contains the record data.
   */
  "record"?: object;
  /**
   * The relevance score of the result.  This is the best of `index_score` and `neural_score` with any index boosts applied on top.
   */
  "relevanceScore"?: number;
  /**
   * The overall relevance of the result.  This is a value between 0 and 1 that combines the index, neural and feature scores. The higher the score the more relevant the result is.
   */
  "score"?: number;
  "token"?: QueryResultToken;

  static discriminator: string | undefined = undefined;

  static attributeTypeMap: Array<{
    name: string;
    baseName: string;
    type: string;
  }> = [
    {
      name: "banner",
      baseName: "banner",
      type: "Banner",
    },
    {
      name: "featureScore",
      baseName: "feature_score",
      type: "number",
    },
    {
      name: "indexScore",
      baseName: "index_score",
      type: "number",
    },
    {
      name: "neuralScore",
      baseName: "neural_score",
      type: "number",
    },
    {
      name: "record",
      baseName: "record",
      type: "object",
    },
    {
      name: "relevanceScore",
      baseName: "relevance_score",
      type: "number",
    },
    {
      name: "score",
      baseName: "score",
      type: "number",
    },
    {
      name: "token",
      baseName: "token",
      type: "QueryResultToken",
    },
  ];

  static getAttributeTypeMap() {
    return QueryResult.attributeTypeMap;
  }
}
