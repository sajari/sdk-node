/**
 * Search.io API
 * Search.io offers a search and discovery service with NeuralsearchÂ®, the world\'s first instant AI search technology. Businesses of all sizes use Search.io to build site search and discovery solutions that maximize e-commerce revenue, optimize on-site customer experience, and scale their online presence.
 *
 * The version of the OpenAPI document: v4
 * Contact: support@search.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from "./models";
import { PipelineStep } from "./pipelineStep";
import { PipelineType } from "./pipelineType";

export class Pipeline {
  /**
   * Output only. Indicates if the pipeline is the collection default pipeline.
   */
  "collectionDefault"?: boolean;
  /**
   * Output only. Time the pipeline was created.
   */
  "createTime"?: Date;
  /**
   * Output only. Indicates if the pipeline is the default version.
   */
  "defaultVersion"?: boolean;
  /**
   * Description of the pipeline.
   */
  "description"?: string;
  /**
   * The pipeline\'s name.  Must start with an alphanumeric character followed by one or more alphanumeric, `_`, `-` or `.` characters. Strictly speaking, it must match the regular expression: `^[a-zA-Z0-9][a-zA-Z0-9_\\-\\.]+$`.
   */
  "name": string;
  /**
   * The post-steps that are run after an indexing operation or query request has been sent to the search index.  For indexing operations, the post-steps only run when creating new records. They do not run when updating records.  For querying, the post-steps have access to the result-set. This makes it possible to act on the results before sending them back to the caller.
   */
  "postSteps"?: Array<PipelineStep>;
  /**
   * The pre-steps that are run before an indexing operation or query request is sent to the search index.
   */
  "preSteps"?: Array<PipelineStep>;
  "type": PipelineType;
  /**
   * The pipeline\'s version.  Must start with an alphanumeric character followed by one or more alphanumeric, `_`, `-` or `.` characters. Strictly speaking, it must match the regular expression: `^[a-zA-Z0-9][a-zA-Z0-9_\\-\\.]+$`.
   */
  "version": string;

  static discriminator: string | undefined = undefined;

  static attributeTypeMap: Array<{
    name: string;
    baseName: string;
    type: string;
  }> = [
    {
      name: "collectionDefault",
      baseName: "collection_default",
      type: "boolean",
    },
    {
      name: "createTime",
      baseName: "create_time",
      type: "Date",
    },
    {
      name: "defaultVersion",
      baseName: "default_version",
      type: "boolean",
    },
    {
      name: "description",
      baseName: "description",
      type: "string",
    },
    {
      name: "name",
      baseName: "name",
      type: "string",
    },
    {
      name: "postSteps",
      baseName: "post_steps",
      type: "Array<PipelineStep>",
    },
    {
      name: "preSteps",
      baseName: "pre_steps",
      type: "Array<PipelineStep>",
    },
    {
      name: "type",
      baseName: "type",
      type: "PipelineType",
    },
    {
      name: "version",
      baseName: "version",
      type: "string",
    },
  ];

  static getAttributeTypeMap() {
    return Pipeline.attributeTypeMap;
  }
}
