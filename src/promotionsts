import { Client } from "./client";
import { PromotionsApi, V4alpha1CreatePromotionRequest } from "../src/generated/api";

export { withEndpoint, withKeyCredentials } from "./client";

export class PromotionsClient extends Client {
  collectionId: string;

  client: PromotionsApi;

  constructor(
    accountId: string,
    collectionId: string,
    ...options: Array<(client: Client) => void>
  ) {
    super(accountId, ...options);

    this.collectionId = collectionId;

    this.client = new PromotionsApi(this.endpoint);
    this.client.username = this.keyId;
    this.client.password = this.keySecret;
  }

  async createPromotion(
    request: Omit<V4alpha1CreatePromotionRequest, "parent">
  ) {
    const parent = this.parentParts().join("/");
    const res = await this.client.createPromotion(parent, {
      ...request,
      parent,
    });
    return res.body;
  }

  async getPromotion(id: string) {
    const res = await this.client.getPromotion(this.resourceName(id));
    return res.body;
  }

  private resourceName(id: string) {
    return [...this.parentParts(), "promotions", encodeURIComponent(id)].join(
      "/"
    );
  }

  private parentParts() {
    return [
      "accounts",
      encodeURIComponent(this.accountId),
      "collections",
      encodeURIComponent(this.collectionId),
    ];
  }
}
